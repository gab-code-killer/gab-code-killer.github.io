// V√©rifier si l'utilisateur est connect√©
const emailConnecte = localStorage.getItem("utilisateurConnecte");
if (!emailConnecte) {
  window.location.href = "accueil.html";
}

const compteUtilisateur = JSON.parse(localStorage.getItem(emailConnecte));
if (!compteUtilisateur) {
  window.location.href = "accueil.html";
}

// Initialiser les am√©liorations si elles n'existent pas
if (!compteUtilisateur.ameliorations) {
  compteUtilisateur.ameliorations = {
    niveauClic: 1,  // Niveau actuel (commence √† 1)
    pointsParClic: 1 // Points gagn√©s par clic
  };
  localStorage.setItem(emailConnecte, JSON.stringify(compteUtilisateur));
}

// Fonction pour calculer le prix de la prochaine am√©lioration
function calculerPrix(niveauActuel) {
  // S'assurer que niveau est un nombre valide
  if (!niveauActuel || isNaN(niveauActuel)) {
    niveauActuel = 1;
  }
  
  // Prix de base 50, puis +125 pour chaque niveau
  return 50 + (125 * (niveauActuel - 1));
}

// Mettre √† jour l'affichage
function mettreAJourAffichage() {
  // Recharger les donn√©es depuis localStorage pour √™tre s√ªr d'avoir les plus r√©centes
  const compteFrais = JSON.parse(localStorage.getItem(emailConnecte));
  const niveau = compteFrais.ameliorations.niveauClic || 1;
  const pointsParClic = compteFrais.ameliorations.pointsParClic || 1;
  const prix = calculerPrix(niveau); // Passer le niveau actuel
  const score = compteFrais.score || 0;

  document.getElementById("pseudoAffiche").textContent = `Salut ${compteFrais.pseudo} ! üëã`;
  document.getElementById("scoreAffiche").textContent = `Vos points: ${score}`;
  document.getElementById("niveauActuel").textContent = niveau;
  document.getElementById("pointsParClic").textContent = pointsParClic;
  document.getElementById("prixActuel").textContent = `${prix} points`;
  
  // Mettre √† jour le texte du prix complet
  document.getElementById("prixAffiche").innerHTML = `<strong>üí∞ Prix de l'am√©lioration: ${prix} points</strong>`;

  const boutonAcheter = document.getElementById("boutonAcheter");
  if (score >= prix) {
    boutonAcheter.disabled = false;
    boutonAcheter.textContent = "Am√©liorer";
  } else {
    boutonAcheter.disabled = true;
    boutonAcheter.textContent = `Pas assez de points (${prix - score} manquants)`;
  }
}

// Fonction pour acheter l'am√©lioration
function acheterAmelioration() {
  // Recharger les donn√©es les plus r√©centes
  const compteFrais = JSON.parse(localStorage.getItem(emailConnecte));
  const niveau = compteFrais.ameliorations.niveauClic || 1;
  const prix = calculerPrix(niveau); // Passer le niveau actuel
  const score = compteFrais.score || 0;

  if (score >= prix) {
    // D√©duire le prix du score
    compteFrais.score = score - prix;
    
    // Augmenter le niveau et les points par clic
    compteFrais.ameliorations.niveauClic += 1;
    compteFrais.ameliorations.pointsParClic += 1;

    // Sauvegarder les nouvelles donn√©es
    localStorage.setItem(emailConnecte, JSON.stringify(compteFrais));

    alert(`üéâ Am√©lioration achet√©e ! Maintenant tu gagnes ${compteFrais.ameliorations.pointsParClic} points par clic !`);
    
    // Mettre √† jour l'affichage APR√àS l'alert pour √©viter les conflits
    setTimeout(() => {
      mettreAJourAffichage();
    }, 100);
  } else {
    alert("‚ùå Pas assez de points !");
  }
}

// Event listeners
document.getElementById("boutonAcheter").addEventListener("click", acheterAmelioration);

document.getElementById("retourJeu").addEventListener("click", () => {
  window.location.href = "index.html";
});

// Initialiser l'affichage
mettreAJourAffichage();